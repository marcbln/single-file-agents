graph TD
    A[HOWTO__create-a-vue-page.md] --> B(1. Introduction);
    B --> B1(Purpose of a Vue Page in this project);
    B --> B2(General philosophy: orchestrating components, handling page-specific logic and data);
    A --> C(2. File Naming & Location);
    C --> C1(Convention: lower-kebab-case, e.g., <code>my-new-feature-page.vue</code>);
    C --> C2(Directory: <code>vol/www/assets/pages/</code>, organized by module/feature);
    A --> D(3. Core Responsibilities);
    D --> D1(Fetching and preparing data for the view);
    D --> D2(Managing page-level state, including form data and UI state like loading flags);
    D --> D3(Handling user interactions and triggering API calls via <code>ApiService</code>);
    D --> D4(Composing UI by integrating various <code>Tdx</code> components and Vuetify elements);
    D --> D5(Integrating with Vue Router for navigation and parameter handling);
    A --> E(4. Standard File Structure);
    E --> E1(4.1. <code><template></code>: Main layout and component composition);
    E --> E2(4.2. <code><script lang="ts"></code>: Logic using Options API and TypeScript);
    E --> E3(4.3. <code><style scoped></code>: Optional, for page-specific styles not covered by Vuetify/global styles);
    A --> F(5. Script Section In Detail (Options API));
    F --> F1(5.1. <b>Imports</b>: What to import and from where);
    F1 --> F1a(<code>ApiService</code> from <code>~/services/ApiService</code>);
    F1 --> F1b(Interfaces for data models from <code>~/interfaces/</code>);
    F1 --> F1c(Enums from <code>~/enums/autogenerated/</code> - critical for consistency);
    F1 --> F1d(Common <code>Tdx</code> layout, display, form, and feedback components from <code>~/components/</code>);
    F1 --> F1e(Mixins like <code>initOnRouteParamsChangeV2</code>, <code>tabInUrl</code> from <code>~/mixins/</code>);
    F1 --> F1f(Helper functions from <code>~/helpers/</code>);
    F1 --> F1g(Pinia: <code>mapStores</code> from <code>pinia</code>, specific store definitions e.g., <code>useMyStore</code> from <code>~/store-pinia/myStore</code>);
    F --> F2(5.2. <b><code>components</code></b>: Registering all child <code>Tdx</code> components);
    F --> F3(5.3. <b><code>mixins</code></b>: Using standard mixins for common page behaviors);
    F --> F4(5.4. <b><code>inject</code></b>: Accessing global utilities like <code>$_</code> (Lodash));
    F --> F5(5.5. <b><code>data()</code></b>: Initializing page state);
    F5 --> F5a(Standard properties: <code>errorMessagesDict: {}</code>, <code>isSaving: false</code>);
    F5 --> F5b(Properties for data fetched from API, typed with interfaces, e.g., <code>entity: null as MyEntityInterface</code>);
    F5 --> F5c(<code>postData: {}</code> object for form data, mirroring entity structure or API payload);
    F5 --> F5d(UI state flags, e.g., <code>showSomeModal: false</code>);
    F --> F6(5.6. <b><code>computed</code></b>: Deriving data);
    F6 --> F6a(Exposing Enums to the template for use in <code>v-if</code>, loops, or passed to components);
    F6 --> F6b(Preparing data structures for display components like <code>TdxDescriptionList</code> fields);
    F6 --> F6c(Pinia: Using <code>mapStores(useMyStore, useAnotherStore)</code> to access stores);
    F6 --> F6d(Pinia: Accessing store state, e.g., <code>this.myStore.someData</code>, or getters <code>this.myStore.someGetter</code>);
    F --> F7(5.7. <b><code>methods</code></b>: Page logic);
    F7 --> F7a(<code>async init()</code>: Common pattern for initial data fetching, called by <code>mounted</code> and route change mixins. May call Pinia store actions here.);
    F7 --> F7b(API call handlers (e.g., <code>async saveData()</code>, <code>async deleteItem()</code>));
    F7 --> F7b1(Setting <code>this.isSaving = true;</code> and clearing <code>this.errorMessagesDict = {};</code>);
    F7 --> F7b2(Calling <code>ApiService.get/post/put/delete</code>);
    F7 --> F7b3(Success: updating local data, potentially redirecting or showing toast. May call Pinia store actions to update shared state.);
    F7 --> F7b4(Error: populating <code>this.errorMessagesDict</code> from <code>errorResponse.data.payload.errors</code>);
    F7 --> F7b5(Using <code>finally</code> to set <code>this.isSaving = false;</code>);
    F7 --> F7c(UI interaction handlers, e.g., opening modals, handling component events. May call Pinia store actions.);
    F7 --> F7d(Pinia: Calling store actions, e.g., <code>this.myStore.fetchDataFromServer()</code> or <code>this.myStore.updateItem(item)</code>);
    F --> F8(5.8. <b>Lifecycle Hooks</b>: Primarily <code>mounted()</code> for calling <code>init()</code> or initial Pinia store actions);
    A --> G(6. Template Section In Detail);
    G --> G1(6.1. Common Layout: Using <code>TdxPageHeader</code> and <code>TdxPageActions</code>);
    G --> G2(6.2. Error Display: Using <code>TdxAlertErrorMessagesDict</code> with <code>errorMessagesDict</code>);
    G --> G3(6.3. Vuetify: Leveraging Vuetify components for layout (<code>v-row</code>, <code>v-col</code>, <code>v-card</code>) and UI (<code>v-tabs</code>, <code>v-btn</code>, <code>v-switch</code>));
    G --> G4(6.4. Integrating <code>Tdx</code> Components: Passing props and handling emitted events);
    G --> G5(6.5. Modals: Using <code><v-dialog></code> for focused sub-tasks);
    G --> G6(6.6. Accessing Pinia state/getters in template, e.g., <code>myStore.someData</code>);
    A --> H(7. State Management);
    H --> H1(7.1. Primarily local page state within <code>data()</code> for UI-specific concerns);
    H --> H2(7.2. <b>Pinia (Preferred for new development)</b>);
    H2 --> H2a(When to use Pinia: For state shared across components/pages, or complex state logic that benefits from centralization);
    H2 --> H2b(Creating a store: Define in <code>store-pinia/</code> directory, e.g., <code>myFeatureStore.ts</code>);
    H2 --> H2c(Defining state, getters, and actions within the store);
    H2 --> H2d(Accessing in components: Use <code>mapStores</code> in computed, then <code>this.myFeatureStore.propertyOrAction</code>);
    H --> H3(7.3. Vuex (Legacy): For interacting with existing global state. Note the ongoing migration to Pinia.);
    A --> I(8. Routing);
    I --> I1(8.1. Navigation: Using <code><router-link :to="{name: VueRouteNameEnum.MyRouteName, params: {...}}"></code>);
    I --> I2(8.2. Accessing Route Params: via <code>this.$route.params</code>, often handled by mixins);
    A --> J(9. Example Page Structure);
    J --> J1(Basic page template with header and actions);
    J --> J2(Example of a page fetching data and displaying it, potentially using a Pinia store);
    J --> J3(Example of a page with a form, data submission, error handling, and Pinia store interaction);
    A --> K(10. Key Considerations & Best Practices);
    K --> K1(Keep pages focused on orchestration, delegate UI to components);
    K --> K2(Consistent error handling and loading state management);
    K --> K3(Leverage existing <code>Tdx</code> components and helpers);
    K --> K4(Use Pinia for shared/complex state, local data for page-specific UI state);

