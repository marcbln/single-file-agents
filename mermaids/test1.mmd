graph TD
    A[HOWTO__create-a-vue-component.md] --> B(1. Introduction);
    B --> B1(Purpose of a Vue Component in this project: reusability, encapsulation);
    B --> B2(Types of components: Presentational, Interactive Widgets, Form Elements);
    A --> C(2. File Naming & Location);
    C --> C1(Convention: PascalCase, prefixed with <code>Tdx</code>, e.g., <code>TdxMyNewWidget.vue</code>);
    C --> C2(Directory: <code>vol/www/assets/components/</code>, organized by category, e.g., <code>layout/</code>, <code>widgets/</code>, <code>forms/</code>);
    A --> D(3. Core Responsibilities);
    D --> D1(Encapsulating a specific piece of UI and its behavior);
    D --> D2(Receiving data and configuration via props);
    D --> D3(Emitting events to communicate changes or actions to parent components);
    D --> D4(Maintaining its own internal state if necessary);
    A --> E(4. Standard File Structure);
    E --> E1(4.1. <code><template></code>: The component's markup);
    E --> E2(4.2. <code><script lang="ts"></code>: Logic using Options API and TypeScript);
    E --> E3(4.3. <code><style scoped></code>: Preferred for component-specific styles);
    A --> F(5. Script Section In Detail (Options API));
    F --> F1(5.1. <b>Imports</b>);
    F1 --> F1a(Child <code>Tdx</code> components if it's a composite component);
    F1 --> F1b(Interfaces for prop types from <code>~/interfaces/</code>);
    F1 --> F1c(Enums from <code>~/enums/autogenerated/</code> if relevant to props or internal logic);
    F --> F2(5.2. <b><code>components</code></b>: Registering child <code>Tdx</code> components, if any);
    F --> F3(5.3. <b><code>props</code></b>: Defining the component's API - CRITICAL section);
    F3 --> F3a(Detailed definition: <code>{ type: String, required: true, default: 'foo' }</code>);
    F3 --> F3b(Use specific types (<code>String</code>, <code>Boolean</code>, <code>Number</code>, <code>Object</code>, <code>Array</code>, custom Constructor));
    F3 --> F3c(<code>default</code> values for optional props, especially for objects/arrays use a factory function);
    F3 --> F3d(Validators for complex props if needed);
    F --> F4(5.4. <b><code>data()</code></b>: For internal component state only);
    F --> F5(5.5. <b><code>computed</code></b>: For deriving data based on props or internal state);
    F --> F6(5.6. <b><code>methods</code></b>: For internal logic and event handlers that might emit events);
    F --> F7(5.7. <b><code>watch</code></b>: Reacting to prop changes if complex logic is needed (prefer computed properties where possible));
    F --> F8(5.8. <b>Lifecycle Hooks</b>: As needed (e.g., <code>mounted</code>, <code>beforeUnmount</code>));
    A --> G(6. Template Section In Detail);
    G --> G1(6.1. Using props to display data and control behavior (e.g., <code>v-if="showDetailsProp"</code>));
    G --> G2(6.2. Binding to component's internal state (<code>data</code> or <code>computed</code>));
    G --> G3(6.3. Using Vuetify and other <code>Tdx</code> components as building blocks);
    G --> G4(6.4. Emitting events: <code><button @click="$emit('myCustomEvent', eventPayload)"></code>);
    G --> G5(6.5. Using <code><slot></code> for content projection if the component is a wrapper/layout type);
    A --> H(7. Communication Patterns);
    H --> H1(7.1. Parent to Child: Props);
    H --> H2(7.2. Child to Parent: Events (<code>$emit</code>));
    A --> I(8. Styling);
    I --> I1(8.1. Prefer <code><style scoped></code> for component-specific styles);
    I --> I2(8.2. Leverage Vuetify classes and utility classes from global styles where appropriate);
    A --> J(9. Common <code>Tdx</code> Component Categories to be aware of);
    J --> J1(Layout (e.g., <code>TdxPageHeader</code>, <code>TdxPageActions</code>));
    J --> J2(Display (e.g., <code>TdxDescriptionList</code>, <code>TdxStatusChip</code>));
    J --> J3(Forms & Widgets (e.g., <code>TdxChooseOneGeneric</code>, <code>TdxSelectOne...</code>, <code>TdxSimpleToggleButtonsWidget</code>));
    J --> J4(Buttons (e.g., <code>TdxIconButton</code>, <code>TdxDeleteButton</code>));
    J --> J5(Feedback (e.g., <code>TdxAlertErrorMessagesDict</code>));
    A --> K(10. Example Component Structures);
    K --> K1(Simple presentational component with props);
    K --> K2(Interactive widget emitting an event);
    K --> K3(Component using slots);
    A --> L(11. Key Considerations & Best Practices);
    L --> L1(Aim for high reusability and clear props API);
    L --> L2(Keep components focused on a single responsibility);
    L --> L3(Properly document props and emitted events (in comments or accompanying docs));
